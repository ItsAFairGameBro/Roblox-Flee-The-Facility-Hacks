local RS = game:GetService("ReplicatedStorage")
local PS = game:GetService("Players")
local SG = game:GetService("StarterGui")
local PhysicsS = game:GetService("PhysicsService")

local plr = PS.LocalPlayer
return function(C,_SETTINGS)
	C.AvailableHacks["Developer"]={
		[1]={
			["Type"]="ExTextButton",
			["Title"]="View Console",
			["Desc"]="Views default Roblox Console",
			["Shortcut"]="Developer_ViewConsole",
			["Default"]=true,
			["DontActivate"]=true,
			["Universes"] = {"Global"},
			["Options"]={
				[true]={
					["Title"]="ACTIVATE",
					["TextColor"]=Color3.fromRGB(0,0,170),
				},
			},
			["ActivateFunction"]=function(newValue)
				SG:SetCore("DevConsoleVisible", true)
			end,
		},
		[2]={
			["Type"]="ExTextButton",
			["Title"]="Get Collisions Groups",
			["Desc"]="Gets all possible collision groups, and prints it to the console",
			["Shortcut"]="Developer_PrintCollisionGroups",
			["Default"]=true,
			["DontActivate"]=true,
			["Universes"] = {"Global"},
			["Options"]={
				[true]={
					["Title"]="ACTIVATE",
					["TextColor"]=Color3.fromRGB(0,170),
				},
			},
			["ActivateFunction"]=function(newValue)
				local CollisionGroups = PhysicsS:GetRegisteredCollisionGroups()
				for key, val in ipairs(CollisionGroups) do
					print(val.name.." (id=" .. key ..") collides:")
					for num, val2 in pairs(CollisionGroups) do
						print("\t"..val2.name,PhysicsS:CollisionGroupsAreCollidable(val2.name,val.name),"\n")
					end
				end
			end,
		},
		[3]={
			["Type"]="ExTextButton",
			["Title"]="Teleport Detection",
			["Desc"]="Prints when you can possibly get teleported",
			["Shortcut"]="Developer_PrintPartTeleports",
			["Default"]=false,
			["DontActivate"]=true,
			["Functs"]={},
			["Universes"] = {"Global"},
			["ActivateFunction"]=function(newValue)
				local whitelistedNames = {"UpperTorso", "Torso", "Head", "Head", "HumanoidRootPart"} 
				for num, funct in ipairs(C.AvailableHacks.Developer[3].Functs) do
					funct:Disconnect()
				end C.AvailableHacks.Developer[3].Functs = {}
				if newValue then
					for num, instance in ipairs(C.char and C.char:GetChildren() or {}) do
						if instance:IsA("BasePart") or table.find(whitelistedNames,instance.Name) then
							table.insert(C.AvailableHacks.Developer[3].Functs,instance:GetPropertyChangedSignal("CFrame"):Connect(function()
								print(instance:GetFullName():gsub(C.char:GetFullName(),"Char") .. " Teleported!")
							end))
						end
					end
				end
			end,
			["MyStartUp"]=function()
				C.AvailableHacks.Developer[3].ActivateFunction(C.enHacks.Developer_PrintPartTeleports)
			end,
		},
		[5]={
			["Type"]="ExTextButton",
			["Title"]="Find Attributes",
			["Desc"]="Prints all attributes and where they occur!",
			["Shortcut"]="Developer_PrintPartAttributes",
			["Default"]=true,
			["DontActivate"]=true,
			["Functs"]={},
			["Universes"] = {"Global"},
			["Options"]={
				[true]={
					["Title"]="ACTIVATE",
					["TextColor"]=Color3.fromRGB(0,170),
				},
			},
			["ActivateFunction"]=function(newValue)
				local ignoreParent = {[game.CoreGui]=true}
				local ignoreList = {["OrgColor"]=true,["OrgTrans"]=true,['wallclip']=true,['HackGUI1']=true,
					["OriginalCollide"]=true,["WeirdCanCollide"]=true,["Opened"]=true,["SaveVolume"]=true}
				local instsScanned = 0
				local function printAtt(obj)
					for _,instance in ipairs(ignoreList) do
						if instance:IsAncestorOf(obj) then
							return
						end 
					end
					local printStr
					for attribute, val in pairs(obj:GetAttributes()) do
						if not ignoreList[attribute] then
							if not printStr then
								printStr = "\tOBJ ["..obj:GetFullName().."]:"
							end
							printStr..="\n\t\t"..attribute.."="..tostring(val)
						end
					end
					if printStr then
						print(printStr)
					end
				end
				local function loop(obj,instsScanned)
					instsScanned = (instsScanned or 0) + 1
					printAtt(obj)
					if table.find(ignoreParent,obj) then
						return -- don't go through ignoreparents!
					end
					for num, instance in ipairs(obj:GetChildren()) do
						loop(instance,instsScanned)
						if num%40==0 then
							game["Run Service"].RenderStepped:Wait()
						end
					end
					return instsScanned
				end
				local start = os.clock()
				
				print(("Looped through %i instances in %.2f seconds!"):format(loop(game),os.clock()-start))
			end,			
		}
	}
end
