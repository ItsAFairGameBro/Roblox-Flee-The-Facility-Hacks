local RS = game:GetService("ReplicatedStorage")
local PS = game:GetService("Players")

local plr = PS.LocalPlayer
return function(C,_SETTINGS)
	C.DataStorage={
		["USDock"]={Health=25e3,Base="Dock",Type="Base"},
		["JapanDock"]={Health=25e3,Base="Dock",Type="Base"},
		["Island"]={Health=8e3,Base="Island",Type="Base"},

		["Carrier"]={Health=10e3,Type="Ship"},
		["Battleship"]={Health=10e3,Type="Ship"},
		["Destroyer"]={Health=2500,Type="Ship"},
		["Cruiser"]={Health=3500,Type="Ship"},
		["Heavy Cruiser"]={Health=5500,Type="Ship"},
		["Submarine"]={Health=1000,Type="Ship"},

		["Bomber"]={Health=100,Type="Plane"},
		["Torpedo Bomber"]={Health=100,Type="Plane"},
		["Large Bomber"]={Health=300,Type="Plane"},
	}
	function C.isInGame(theirChar)
		if theirChar and theirChar.Name == "InviClone" then
			theirChar = C.char
		end
		local player=PS:GetPlayerFromCharacter(theirChar)
		if not player then
			return false, "Neutral"--No player, no team!
		end
		local PrimaryPart = theirChar.PrimaryPart
		if not PrimaryPart or PrimaryPart.Position.Y < -260 then
			return false, player.Team -- Player, but in lobby!
		end

		return true, player.Team -- Player exists!
	end
	function C.getClosest(canBeInLobby:boolean,notSeated:boolean)
		print("closest run")
		local myHRP = C.char and C.char.PrimaryPart
		if not C.human or C.human.Health <= 0 or not myHRP then print('a')  return end


		local closest = nil;
		local distance = math.huge;


		for i, v in pairs(PS.GetPlayers(PS)) do
			if v == plr then print('b') continue end
			if _SETTINGS.whitelistedUsers[plr.Name:lower()] then print('c') continue end
			local theirChar = v.Character
			if not theirChar then print('d') continue end
			local isInGame,team = C.isInGame(theirChar)
			if not isInGame and not canBeInLobby then print('e') continue end
			if team == plr.Team then print('f') continue end
			local theirHumanoid = theirChar.FindFirstChildOfClass(theirChar,"Humanoid")
			if not theirHumanoid or theirHumanoid.Health <= 0 then print('g') continue end
			if notSeated and (theirHumanoid.SeatPart or theirChar.FindFirstChild(theirChar,"ForceFieldVar")) then print('h') continue end
			local theirHead = theirChar.FindFirstChild(theirChar,"Head")
			if not theirHead then print('j') continue end

			local d = (theirHead.Position - myHRP.Position).Magnitude

			if d < distance then
				distance = d
				closest = theirHead
			end
		end

		return closest, distance
	end
	function C.getClosestBase()
		local selBase, maxDist = nil, math.huge
		for baseType, bases in pairs(C.Bases) do
			for num, base in ipairs(bases) do
				if base:FindFirstChild("Team") and base.Team.Value ~= "" and base.Team.Value ~= plr.Team.Name and base.HP.Value > 0 then
					local MainBody = base:WaitForChild("MainBody")
					local d = (MainBody.Position - C.char.PrimaryPart.Position).Magnitude
					if d < maxDist then
						selBase, maxDist = MainBody, d
					end
				end
			end
		end
		return selBase, maxDist
	end
	getgenv().isInGame = C.isInGame
	if C.gameUniverse=="NavalWarefare" then
		C.RemoteEvent = RS:WaitForChild("Event") -- image naming something "Event"
		local BasesToLookFor = {"USDock","JapanDock","Island"}
		C.Bases = {Dock={},Island={}}
		C.Planes, C.Ships = {}, {}
		local function newChild(instance)
			if instance.ClassName ~= "Model" then
				return
			end
			local instData = C.DataStorage[instance.Name]
			if instData then
				--if instData.Type == "Base" then
				local HitCode = instance:WaitForChild("HitCode")
				local ID = instData.Base or instData.Type -- Dock or Island
				local SelectTbl = C[instData.Type.."s"]
				if SelectTbl[ID] then
					SelectTbl = SelectTbl[ID]
				end
				table.insert(SelectTbl,instance)
				C.defaultFunction(ID .. "Added",{instance})
				C.objectFuncts[instance] = C.objectFuncts[instance] or {}
				C.objectFuncts[instance]["Destroying"] = {instance.Destroying:Connect(function()
					--Disconnect the event
					local num = table.find(SelectTbl, instance)
					if num then
						table.remove(SelectTbl,num)
					end
					C.defaultFunction(ID .. "Removed",{instance})
					C.objectFuncts[instance] = nil
				end)}
				--end

			end
		end
		table.insert(C.functs,workspace.ChildAdded:Connect(newChild))
		for num, instance in ipairs(workspace:GetChildren()) do
			newChild(instance)
		end
	end
end
